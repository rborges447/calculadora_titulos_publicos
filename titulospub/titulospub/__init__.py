#!/usr/bin/env python3
"""
M√≥dulo titulospub - Sistema de C√°lculo de T√≠tulos P√∫blicos Brasileiros

Este m√≥dulo cont√©m todas as funcionalidades para c√°lculo e an√°lise de t√≠tulos p√∫blicos:
- Classes de t√≠tulos: NTNB, LTN, LFT, NTNF
- Fun√ß√µes de scraping de dados de mercado
- Utilit√°rios para manipula√ß√£o de datas e arquivos
- Sistema de cache e backup de dados

Exemplo de uso:
    from titulospub import NTNB, LTN, LFT, NTNF
    
    # Criar t√≠tulos
    ntnb = NTNB("2035-05-15", taxa=7.53)
    ltn = LTN("2025-01-01", taxa=12.5)
    
    # Definir posi√ß√µes
    ntnb.financeiro = 100000
    ltn.quantidade = 50000
"""

# Importar classes de t√≠tulos do m√≥dulo core
from .core import NTNB, LTN, LFT, NTNF

# Importar fun√ß√µes principais de cada m√≥dulo
from .scraping import (
    scrap_cdi,
    scrap_feriados,
    scrap_proj_ipca,
    scrap_anbimas,
    scrap_vna_lft,
    puxar_valores_ipca_fechado,
    definir_caminho_adj_bmf,
    scrap_ajustes_bmf,
    scrap_bmf_net
)

from .utils import (
    adicionar_dias_uteis,
    e_dia_util,
    dias_trabalho_total,
    listar_dias_entre_datas,
    ajustar_para_proximo_dia_util,
    listar_datas,
    data_vencimento_ajustada,
    datas_pagamento_cupons,
    path_backup_csv,
    path_backup_pickle,
    path_logs,
    _carrecar_cdi_se_necessario,
    _carrecar_ipca_dict_se_necessario,
    _carregar_feriados_se_necessario,
    _carregar_vna_lft_se_necessario
)

from .dados import (
    backup_cdi,
    backup_feriados,
    backup_ipca_fechado,
    backup_ipca_proj,
    backup_anbimas,
    backup_bmf,
    save_cache,
    load_cache,
    clear_cache,
    anbimas,
    ajustes_bmf,
    ajustes_bmf_net,
    dicionario_ipca,
    VariaveisMercado
)

# Lista de todas as classes e fun√ß√µes dispon√≠veis
__all__ = [
    # Classes de t√≠tulos
    'NTNB',
    'LTN',
    'LFT',
    'NTNF',
    
    # Fun√ß√µes de scraping
    'scrap_cdi',
    'scrap_feriados',
    'scrap_proj_ipca',
    'scrap_anbimas',
    'scrap_vna_lft',
    'puxar_valores_ipca_fechado',
    'definir_caminho_adj_bmf',
    'scrap_ajustes_bmf',
    'scrap_bmf_net',
    
    # Fun√ß√µes utilit√°rias
    'adicionar_dias_uteis',
    'e_dia_util',
    'dias_trabalho_total',
    'listar_dias_entre_datas',
    'ajustar_para_proximo_dia_util',
    'listar_datas',
    'data_vencimento_ajustada',
    'datas_pagamento_cupons',
    'path_backup_csv',
    'path_backup_pickle',
    'path_logs',
    '_carrecar_cdi_se_necessario',
    '_carrecar_ipca_dict_se_necessario',
    '_carregar_feriados_se_necessario',
    '_carregar_vna_lft_se_necessario',
    
    # Fun√ß√µes de dados
    'backup_cdi',
    'backup_feriados',
    'backup_ipca_fechado',
    'backup_ipca_proj',
    'backup_anbimas',
    'backup_bmf',
    'save_cache',
    'load_cache',
    'clear_cache',
    'anbimas',
    'ajustes_bmf',
    'ajustes_bmf_net',
    'dicionario_ipca',
    'VariaveisMercado'
]

# Vers√£o do m√≥dulo
__version__ = "1.0.0"

# Informa√ß√µes sobre o m√≥dulo
__author__ = "Sistema de C√°lculo de T√≠tulos P√∫blicos"
__description__ = "Sistema completo para c√°lculo e an√°lise de t√≠tulos p√∫blicos brasileiros"

def get_info_modulos():
    """
    Retorna informa√ß√µes sobre todos os subm√≥dulos dispon√≠veis
    
    Returns:
        dict: Dicion√°rio com informa√ß√µes dos m√≥dulos
    """
    return {
        'core': {
            'descricao': 'Classes principais dos t√≠tulos p√∫blicos',
            'classes': ['NTNB', 'LTN', 'LFT', 'NTNF'],
            'versao': '1.0.0'
        },
        'scraping': {
            'descricao': 'Fun√ß√µes para coleta de dados de mercado',
            'funcoes': ['scrap_cdi', 'scrap_feriados', 'scrap_anbimas', 'scrap_vna_lft', 'scrap_bmf_net'],
            'versao': '1.0.0'
        },
        'utils': {
            'descricao': 'Utilit√°rios para manipula√ß√£o de datas e arquivos',
            'funcoes': ['adicionar_dias_uteis', 'e_dia_util', 'path_backup_csv'],
            'versao': '1.0.0'
        },
        'dados': {
            'descricao': 'Sistema de cache, backup e processamento de dados',
            'funcoes': ['VariaveisMercado', 'save_cache', 'backup_cdi'],
            'versao': '1.0.0'
        }
    }

def listar_funcionalidades():
    """
    Exibe todas as funcionalidades dispon√≠veis no m√≥dulo
    """
    print("üìã FUNCIONALIDADES DO M√ìDULO TITULOSPUB")
    print("=" * 60)
    
    print("\nüéØ CLASSES DE T√çTULOS:")
    print("   - NTNB: T√≠tulos P√∫blicos Indexados ao IPCA")
    print("   - LTN: Letras do Tesouro Nacional")
    print("   - LFT: Letras Financeiras do Tesouro")
    print("   - NTNF: Notas do Tesouro Nacional - S√©rie F")
    
    print("\nüîç FUN√á√ïES DE SCRAPING:")
    print("   - scrap_cdi: Coleta dados do CDI")
    print("   - scrap_feriados: Coleta feriados")
    print("   - scrap_anbimas: Coleta dados ANBIMA")
    print("   - scrap_vna_lft: Coleta VNA LFT")
    print("   - scrap_bmf_net: Coleta dados BMF")
    
    print("\n‚öôÔ∏è FUN√á√ïES UTILIT√ÅRIAS:")
    print("   - adicionar_dias_uteis: Adiciona dias √∫teis")
    print("   - e_dia_util: Verifica se √© dia √∫til")
    print("   - path_backup_csv: Caminho para backup CSV")
    
    print("\nüíæ FUN√á√ïES DE DADOS:")
    print("   - VariaveisMercado: Orquestrador de dados")
    print("   - save_cache: Salva cache")
    print("   - backup_cdi: Backup do CDI")
    
    print("\nüí° EXEMPLO DE USO:")
    print("   from titulospub import NTNB, LTN, VariaveisMercado")
    print("   ntnb = NTNB('2035-05-15', taxa=7.53)")
    print("   ntnb.financeiro = 100000")

def criar_titulo(tipo_titulo, data_vencimento, **kwargs):
    """
    Fun√ß√£o factory para criar t√≠tulos de forma din√¢mica
    
    Args:
        tipo_titulo (str): Tipo do t√≠tulo ('NTNB', 'LTN', 'LFT', 'NTNF')
        data_vencimento (str): Data de vencimento do t√≠tulo
        **kwargs: Par√¢metros adicionais para o construtor do t√≠tulo
    
    Returns:
        T√≠tulo: Inst√¢ncia do t√≠tulo criado
        
    Raises:
        ValueError: Se o tipo de t√≠tulo n√£o for reconhecido
    """
    titulos_disponiveis = {
        'NTNB': NTNB,
        'LTN': LTN,
        'LFT': LFT,
        'NTNF': NTNF
    }
    
    if tipo_titulo not in titulos_disponiveis:
        raise ValueError(f"Tipo de t√≠tulo '{tipo_titulo}' n√£o reconhecido. "
                        f"Tipos dispon√≠veis: {list(titulos_disponiveis.keys())}")
    
    return titulos_disponiveis[tipo_titulo](data_vencimento, **kwargs)
